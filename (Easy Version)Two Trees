
/*
AUTHOR: Aman Raj
College:IIT JODHPUR
Branch:CSE
LANG: C++
*/

using namespace std;

typedef     long long ll;
#include <bits/stdc++.h>


//setbase - cout << setbase (16); cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 << endl; prints xxx77
//setprecision - cout << setprecision (14) << f << endl; Prints x.xxxx
//cout.precision(x)  cout<<fixed<<val;  // prints x digits after decimal in val
#define fast  ios_base::sync_with_stdio(false); cin.tie(0);  cout.tie(0);
#define all(a) a.begin(),a.end()
#define allr(a) a.rbegin,a.rend()
//#define mod 998244353





#define inf 1e18
//#define mod 3
#define flush fflush(stdout)

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
typedef cc_hash_table<ll, ll, hash< ll > > ht;

// find_by_order()  // order_of_key
typedef tree<
    pair<ll,ll>,
    null_type,
    less<pair<ll,ll> >,
    rb_tree_tag,
    tree_order_statistics_node_update>
    ordered_set;




ll mod=1e9+7;

ll power1(ll a, ll b)//a raised to power b
   {  if(b<=0) return 1; if(b==1) return a;
       ll c=power1(a,b/2);
        c*=c;c%=mod;if(b%2==1) c*=a;c%=mod;
        return c;
   }
   ll mi(ll a)
   { ll c= power1(a,mod-2);

     return c;
   }



 struct less_then_greater {
    template<typename T, typename U>
    bool operator()(T const& lhs, U const& rhs) const {
        if (lhs.first < rhs.first) return true;
        if (rhs.first < lhs.first) return false;
        return lhs.second > rhs.second;
    }
};

 /*std::priority_queue<std::pair<int, int>,
                    std::vector<std::pair<int, int>>,
                    less_then_greater
                    > pq;*/
ll gcd(ll a,ll b)
{
    if(b==0)return a;
    return gcd(b,a%b);
}
//cout<<"Case #"<<tt<<": "<<ans<<endl;

void self_max(ll &a,ll b)
{
    a=max(a,b);
}
void self_min(ll &a,ll b)
{
    a=min(a,b);
}
ll n;
vector<pair<ll,ll> > vp;//parent and weight
vector<ll> vw;
vector<vector<pair<ll,ll> > > v;
vector<ll> visited;

vector<ll> v2d;

vector<ll> v1c;

vector<ll> v2c;
void dfs(ll a)
{
    visited[a]=1;
    for(auto x:v[a])
    {
        if(!visited[x.first]){vp[x.first]={a,x.second};dfs(x.first); }
    }
    visited[a]=0;
}
void dfs2d(ll a)
{
    visited[a]=1;
     ll p=vp[a].first,d=vp[a].second;
     if(p!=a)
     {
         v2d[a]=v2d[p]+2*d;
     }
     for(auto x:v[a])
     {
         if(!visited[x.first])dfs2d(x.first);
     }
     visited[a]=0;
}

void dfs1c(ll a)
{
    visited[a]=1;
     v1c[a]=vw[a]+v2d[a];
     ll p=vp[a].first,d=vp[a].second;
     if(p!=a)
     {
         self_min(v1c[a],d+v1c[p]);
     }
     for(auto x:v[a])
     {
         if(!visited[x.first])dfs1c(x.first);
     }
     visited[a]=0;
}

void dfs2c(ll a)
{
    visited[a]=1;
    v2c[a]=v2d[a];

    self_min(v2c[a],vw[a]+v1c[a]);


     ll p=vp[a].first,d=vp[a].second;
     if(p!=a)
     {
         self_min(v2c[a],2*d+v2c[p]);
     }
     for(auto x:v[a])
     {
         if(!visited[x.first])dfs2c(x.first);
     }
     visited[a]=0;

}
int main()
{  fast;
    cin>>n;
    vp.resize(n);
    visited.resize(n);
    v.resize(n);
    vw.resize(n);
    for(ll i=0;i<n-1;i++)
    {
        ll a,b,x;cin>>a>>b>>x;
        a--;b--;
        v[a].push_back({b,x});v[b].push_back({a,x});
    }
    for(auto &x:vw)cin>>x;

    dfs(0);//to assign parent

    v2d.resize(n);
    dfs2d(0);

    v1c.resize(n);
    dfs1c(0);

    v2c.resize(n);v2c[0]=0;
    dfs2c(0);

    ll q;cin>>q;
    while(q--)
    {
        ll u,v;cin>>u>>v;
        u--;v--;
        cout<<v2c[u]<<endl;
    }
   return 0;
}
